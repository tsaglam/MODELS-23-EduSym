@namespace(uri="http://www.example.org/mdsd", prefix="mdsd")
package mdsd;

@namespace(uri="http://www.example.org/mdsd/repository", prefix="repository")
package Repository {
	abstract class DataType {
	}

	abstract class ParameterDataType extends DataType {
	}

	abstract class SimpleDataType extends ParameterDataType {
	}

	class BehaviourDescription {
		val ExternalCall[*] externalCalls;
		val Branch[*] branches;
		val Loop[*] loops;
		val InternalAction[*] internalActions;
	}

	class Repository {
		val Component[*] components;
		val Interface[*] interfaces;
	}

	class Interface extends Core.NamedEntity {
		val Signature[+] signatures;
	}

	class Branch {
	}

	class InternalAction {
	}

	class Loop {
	}

	class VoidType extends DataType {
	}

	class ComplexDataType extends ParameterDataType {
	}

	class FloatType extends SimpleDataType {
	}

	class CharType extends SimpleDataType {
	}

	class IntType extends SimpleDataType {
	}

	class ListType extends SimpleDataType {
	}

	class BooleanType extends SimpleDataType {
	}

	class LongType extends SimpleDataType {
	}

	class StringType extends SimpleDataType {
	}

	class DateType extends SimpleDataType {
	}

	class DoubleType extends SimpleDataType {
	}

	class MapType extends SimpleDataType {
	}

	class Component extends Core.NamedEntity {
		val BehaviourDescription behaviour;
		ref Interface[*] providedInterfaces;
		ref Interface[*] requiredInterfaces;
	}

	class Parameter extends Core.NamedEntity {
		val ParameterDataType[1] dataType;
	}

	class Signature extends Core.NamedEntity {
		val Service[1]#signature service;
		val DataType[1] returnType;
		val Parameter[*] parameters;
	}

	class ExternalCall {
		ref Service[1] service;
	}

	class Service extends Core.NamedEntity {
		ref Signature[1]#service signature;
	}

}

@namespace(uri="http://www.example.org/mdsd/deployment", prefix="deployment")
package Deployment {
	@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
	@namespace(uri="http://www.example.org/mdsd/deployment/allocation", prefix="allocation")
	package Allocation {
		@Ecore(constraints="compositeComponentXorAssemblyContext")
		@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(compositeComponentXorAssemblyContext="compositeComponent <> null xor assemblyContext <> null")
		class AllocationContext {
			ref Environment.Container[1] container;
			ref Assembly.AssemblyContext assemblyContext;
			ref Assembly.CompositeComponent compositeComponent;
		}

		@Ecore(constraints="onlyTopLevelAssemblyContexts ConnectionsInAllocation")
		@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(onlyTopLevelAssemblyContexts="allocationContexts -> collect(assemblyContext) ->excluding(null)->asBag()->
				intersection(allocationContexts -> collect(compositeComponent)->excluding(null) ->collect(assemblyContexts)->asBag())->size()=0", ConnectionsInAllocation="system.assemblyConnectors->forAll(assConn|
				allocationContexts->forAll(allCont| assConn.providingEntity = allCont.assemblyContext implies
					allocationContexts->forAll(innerAllCont| 
						(innerAllCont.assemblyContext = assConn.requiringEntity implies innerAllCont.container = allCont.container)
					or environment.links->exists(link| link.containers->includes( allCont.container)  and
						link.containers->includes(innerAllCont.container))
					
				)
				)
				)")
		class Allocation {
			val AllocationContext[*] allocationContexts;
			ref Environment.Environment[1] environment;
			ref Assembly.System[1] system;
		}

	}

	@namespace(uri="http://www.example.org/mdsd/deployment/environment", prefix="environment")
	package Environment {
		class Environment extends Core.NamedEntity {
			val Link[*] links;
			val Container[*] containers;
		}

		class Container extends Core.NamedEntity {
		}

		class Link extends Core.NamedEntity {
			ref Container[2..*] containers;
		}

	}

}

@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
@namespace(uri="http://www.example.org/mdsd/assembly", prefix="assembly")
package Assembly {
	abstract class DelegationConnector {
		ref AssemblyContext[1] assemblyContext;
		ref Delegable[1] delegable;
	}

	abstract class Delegable extends RoledEntity {
	}

	abstract class RoledEntity extends Core.NamedEntity {
		val Role[+] providedRoles;
		val Role[*] requiredRoles;
	}

	@Ecore(constraints="connectsDifferentContexts validProvidedRole vaildRequiredRole diffentAssemblyContext sameInterface notconntectedWithItSelf notSystem")
	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(connectsDifferentContexts="true", validProvidedRole="providingEntity.providedRoles->includes(self.providedRole)", vaildRequiredRole="requiringEntity.requiredRoles->includes(self.requiredRole)", diffentAssemblyContext="self.providingEntity <> self.requiringEntity", sameInterface="requiredRole.interface = providedRole.interface", notconntectedWithItSelf="providingEntity.oclIsTypeOf(CompositeComponent)  implies not providingEntity.oclAsType(CompositeComponent).assemblyContexts->includes(requiringEntity)", notSystem="not requiringEntity.oclIsTypeOf(System) and not providingEntity.oclIsTypeOf(System)")
	class AssemblyConnector {
		ref Role[1] providedRole;
		ref Role[1] requiredRole;
		ref RoledEntity[1] providingEntity;
		ref RoledEntity[1] requiringEntity;
	}

	@Ecore(constraints="providedRoleExistInDelegable rolesExistInAssemblyContext sameInterface")
	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(providedRoleExistInDelegable="delegable.providedRoles -> includes(providedRoleForDelegable)", rolesExistInAssemblyContext="assemblyContext.providedRoles -> includes(providedRoleForAssemblyContext)", sameInterface="providedRoleForAssemblyContext.interface = providedRoleForDelegable.interface")
	class DelegationConnectorProvidedRole extends DelegationConnector {
		ref Role[1] providedRoleForDelegable;
		ref Role[1] providedRoleForAssemblyContext;
	}

	@Ecore(constraints="requiredRoleExistInDelegable rolesExistInAssemblyContext sameInterface")
	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(requiredRoleExistInDelegable="delegable.requiredRoles -> includes(requiredRoleForDelegable)", rolesExistInAssemblyContext="assemblyContext.requiredRoles -> includes(requiredRoleForAssemblyContext)", sameInterface="requiredRoleForAssemblyContext.interface = requiredRoleForDelegable.interface")
	class DelegationConnectorRequiredRole extends DelegationConnector {
		ref Role[1] requiredRoleForDelegable;
		ref Role[1] requiredRoleForAssemblyContext;
	}

	@Ecore(constraints="providedRolesConsistency requiredRolesConsistency providedRolesSizeConsistency requiredRolesSizeConsistency noIntersection")
	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(providedRolesConsistency="self.providedRoles -> forAll(providedRole | component.providedInterfaces -> includes(providedRole.interface))", requiredRolesConsistency="self.requiredRoles -> forAll(requiredRole | component.requiredInterfaces -> includes(requiredRole.interface))", providedRolesSizeConsistency="self.providedRoles -> size() = component.providedInterfaces -> size()", requiredRolesSizeConsistency="self.requiredRoles -> size() = component.requiredInterfaces -> size()", noIntersection="providedRoles->intersection(requiredRoles)->size() = 0")
	class AssemblyContext extends RoledEntity {
		ref Repository.Component[1] component;
	}

	class Role extends Core.NamedEntity {
		ref Repository.Interface[1] ~interface;
	}

	class System extends Delegable {
		val AssemblyContext[*] assemblyContexts;
		val CompositeComponent[*] compositeComponents;
		val AssemblyConnector[*] assemblyConnectors;
		val DelegationConnector[*] delegationConnectors;
	}

	class CompositeComponent extends Delegable {
		val AssemblyContext[+] assemblyContexts;
	}

}

@namespace(uri="http://www.example.org/mdsd/core", prefix="core")
package Core {
	abstract class NamedEntity {
		attr String name;
	}

}

